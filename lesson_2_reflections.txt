What happens when you initialize a repository? Why do you need to do it?
	
	With git init you create git repository and add a .git file, which keeps 
	track of your commits, making version control possible. 
	You need to to it to show which folder, which files are in the git repository.

How is the staging area different from the working directory and the repository? 
What value do you think it offers?

	The working directory is simply all the files in the folder that are not commited.
	The staging area are "pre-commit" and you are thus able to commit in logical steps, by selecting related files rather than committing everything everytime arbitrarily. 
	the files selected commitable, thus enables version control and all it's benefits.

How can you use the staging area to make sure you have one commit per logical change?
	
	Via adding to the stagin area after this logical change, checking against the workign 
	and last commit about the scope of the changes you made. 
	YOu could simply add the file where the logical change is going to be made to the staging
	area and if it's complete you simply commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	
	When trying out experimental features which will or won't make it into the original 
	version. Since there may not be a change to the original version (master branch),
	it would be pretty confusin to add the history of the experiment there.
	Also for specific versions and their version-specific changes. 
	Branches would make everything a separate instance of the master, thus enabling steady
	progress without changing the working version.

	Compartamentalizing. Context Switiching.

How do the diagrams help you visualize the branch structure?
	
	By graphically showing history, parents, functional dependencies (what had to come before)
	The branches also show the history of experiments, of new features and bug fixes in 
	a more generalized form. 